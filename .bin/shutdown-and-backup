#!/usr/bin/env bash

# detach from drive
if [[ -z $ShutdownAndBackupChildPath ]]; then
    export ShutdownAndBackupChildPath=/tmp/ShutdownAndBackupCopy
    cp -a "$BASH_SOURCE" "$ShutdownAndBackupChildPath"
    (setsid "$ShutdownAndBackupChildPath" "$@" &)
    exit
fi

# trojan-like cleanup :)
rm -f "$ShutdownAndBackupChildPath"

# tools
exec 1>/tmp/stdout-$$.log
exec 2>/tmp/stderr-$$.log

Notify() {
    if [[ $# -eq 1 ]]; then
        local body=$1
    elif [[ $# -eq 2 ]]; then
        local replaceid=$1
        local body=$2
    elif [[ $# -ge 3 ]]; then
        local replaceid=$1
        local summary=$2
        local body=${@:3}
    else
        echo "${FUNCNAME[0]}: not enough arguments" >&2
        return 1
    fi

    local replaceid=${replaceid:=0}
    local summary=${summary:="Backup Status"}
    local gdbusre='\(uint32[[:space:]]+([[:digit:]]+),\)'

    [[ $(gdbus call --session --dest org.freedesktop.Notifications \
        --object-path /org/freedesktop/Notifications \
        --method org.freedesktop.Notifications.Notify \
        "$BASH_SOURCE" \
        "$replaceid" \
        media-flash \
        "$summary" \
        "$body" [] {} 0) =~ $gdbusre ]] && replaceid=${BASH_REMATCH[1]} || return 1
    echo "$replaceid"
}

Fatal() {
    echo "${FUNCNAME[0]}:" "${@:-Fatal.}" >&2
    Notify 0 "Backup Failure" "Backup has filed. See the logs for the details." >/dev/null
    exit 1
}

MountpointDevice() {
    if [[ -f $1 ]] || [[ -d $1 ]]; then
        local mountpoint=$1
    else
        echo "${FUNCNAME[0]}: directory or file path is required" >&2
        return 1
    fi
    # strip df header line
    df --output=source "$mountpoint" | sed 1d
}

BlockDeviceParent() {
    lsblk --output NAME --noheadings --paths --inverse --list "$1" | sed -n 2p
}

# main script
luks_root=${1:?LUKS root directory is required}
luks_container=$(MountpointDevice "$luks_root") || Fatal "Unable to determine LUKS container device"
[[ -b $luks_container ]] || Fatal "'$luks_container' is not a block device"

luks_drive=$(BlockDeviceParent "$luks_container") || Fatal "Unable to determine LUKS drive"
[[ -b $luks_drive ]] || Fatal "'$luks_drive' is not a block device"

echo "CHILD LUKS CONTAINER: $luks_container"
echo "CHILD LUKS DRIVE: $luks_drive"

udisksctl unmount --block-device "$luks_container" || Fatal "Unable to unmount LUKS container"
udisksctl lock --block-device "$luks_drive" || Fatal "Unable to lock LUKS drive"

Notify "Backup complete! :)"
