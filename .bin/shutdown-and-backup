#!/usr/bin/env bash
# MIT License

# Copyright (c) 2017 Jajauma's GitHub

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# detach from the drive and re-exec first
if [[ -z $ShutdownAndBackupChildPath ]]; then
    export ShutdownAndBackupChildPath=/tmp/ShutdownAndBackupCopy
    cp -a "$BASH_SOURCE" "$ShutdownAndBackupChildPath"
    (setsid "$ShutdownAndBackupChildPath" "$@" &)
    exit
fi

exec 1>/tmp/stdout-ShutdownAndBackup.log
exec 2>/tmp/stderr-ShutdownAndBackup.log

# trojan-horse cleanup :)
rm -f "$ShutdownAndBackupChildPath"

# tools
Notify() {
    if [[ $# -eq 1 ]]; then
        local body=$1
    elif [[ $# -eq 2 ]]; then
        local replaceid=$1
        local body=$2
    elif [[ $# -ge 3 ]]; then
        local replaceid=$1
        local summary=$2
        local body=${@:3}
    else
        echo "${FUNCNAME[0]}: not enough arguments" >&2
        return 1
    fi

    local replaceid=${replaceid:=0}
    local summary=${summary:="Backup Status"}
    local gdbusre='\(uint32[[:space:]]+([[:digit:]]+),\)'

    [[ $(gdbus call --session --dest org.freedesktop.Notifications \
        --object-path /org/freedesktop/Notifications \
        --method org.freedesktop.Notifications.Notify \
        "$BASH_SOURCE" \
        "$replaceid" \
        media-flash \
        "$summary" \
        "$body" [] {} 0) =~ $gdbusre ]] && replaceid=${BASH_REMATCH[1]} || return 1
    echo "$replaceid"
}

Fatal() {
    echo "${FUNCNAME[0]}:" "${@:-Fatal.}" >&2
    Notify 0 "Backup Failure" "Backup has failed. See the logs for the details." >/dev/null
    exit 1
}

MountpointDevice() {
    if [[ -f $1 ]] || [[ -d $1 ]]; then
        local mountpoint=$1
    else
        echo "${FUNCNAME[0]}: directory or file path is required" >&2
        return 1
    fi
    # strip df header line
    df --output=source "$mountpoint" | sed 1d
}

BlockDeviceParent() {
    lsblk --output NAME --noheadings --paths --inverse --list "$1" | sed -n 2p
}

DisplayDDProgress() {
    local replaceid=0
    while IFS= read -r -d $'\r' line; do
        [[ -z $line ]] && continue
        replaceid=$(Notify "$replaceid" "$line")
    done
    echo "$replaceid"
}

RunBackupTask() {
    local device=${1:?Block device file is required}
    local destination=${2:?Backup file path is required}

    # really crazy, don't reindent/reformat this
    local replaceid=$(
    python << EndOfPython 2> >(DisplayDDProgress)
import dbus, subprocess, sys
try:
    proxy = dbus.SystemBus().get_object('org.freedesktop.UDisks2',
        '/org/freedesktop/UDisks2/block_devices/${device##*/}')
    block_device = dbus.Interface(proxy, dbus_interface='org.freedesktop.UDisks2.Block')
    fdlist = block_device.OpenForBackup({})
    sys.exit(subprocess.call(['dd', 'of=$destination', 'bs=1M', 'status=progress'],
        stdin=fdlist.take()))
except Exception as e:
    # keep the exception log off the DisplayDDProgress
    print('Inline python exception:')
    print('*** {}'.format(e))
    sys.exit(1)
EndOfPython
    )

    local pythonret=$?
    [[ $pythonret -eq 0 ]] && Notify "$replaceid" "★ Completed successfully! ★" >/dev/null
    return $pythonret
}

# main script
luks_root=${1:?LUKS root directory is required}
luks_container=$(MountpointDevice "$luks_root") || Fatal "Unable to determine LUKS container device"
[[ -b $luks_container ]] || Fatal "'$luks_container' is not a block device"

luks_drive=$(BlockDeviceParent "$luks_container") || Fatal "Unable to determine LUKS drive"
[[ -b $luks_drive ]] || Fatal "'$luks_drive' is not a block device"

echo "CHILD LUKS CONTAINER: $luks_container"
echo "CHILD LUKS DRIVE: $luks_drive"

udisksctl unmount --block-device "$luks_container" || Fatal "Unable to unmount LUKS container"
udisksctl lock --block-device "$luks_drive" || Fatal "Unable to lock LUKS drive"
RunBackupTask "$luks_drive" /var/tmp/www-data.img || Fatal

# successful completion, keep the logs otherwise
rm -f /tmp/std*-ShutdownAndBackup.log
